# comparing pragmatism and originalism: based on vote split not much change at all, still v significant
blueVgreenSplit = t.test(df$Blue[df$Vote.Split == 1], df$Green[df$Vote.Split == 1])
blueNormVgreenNormSplit = t.test(df$BlueNorm[df$Vote.Split == 1], df$GreenNorm[df$Vote.Split == 1])
library(tidyverse)
library(dplyr)
library(stringr)
library(ggplot2)
library(extrafont)
library(RColorBrewer)
green <- "#189D1D"
pink <- "#D824C1"
yellow <-"#D4D824"
orange <- "#D89F24"
purple <-"#A824D8"
blue <- "#244CD8"
df <- read.csv("AlitoDataset.csv")
# makes justice booleans, 0 being dissent, 1 being majority, 2 being other
df <- df %>%
mutate(Roberts = if_else(str_detect(Majority, "Roberts"), 1,
if_else(str_detect(Dissent, "Roberts"), 0, 2))) %>%
mutate(Stevens = if_else(str_detect(Majority, "Stevens"), 1,
if_else(str_detect(Dissent, "Stevens"), 0, 2))) %>%
mutate(Scalia = if_else(str_detect(Majority, "Scalia"), 1,
if_else(str_detect(Dissent, "Scalia"), 0, 2))) %>%
mutate(Kennedy = if_else(str_detect(Majority, "Kennedy"), 1,
if_else(str_detect(Dissent, "Kennedy"), 0, 2))) %>%
mutate(Souter = if_else(str_detect(Majority, "Souter"), 1,
if_else(str_detect(Dissent, "Souter"), 0, 2))) %>%
mutate(Thomas = if_else(str_detect(Majority, "Thomas"), 1,
if_else(str_detect(Dissent, "Thomas"), 0, 2))) %>%
mutate(Ginsburg = if_else(str_detect(Majority, "Ginsburg"), 1,
if_else(str_detect(Dissent, "Ginsburg"), 0, 2))) %>%
mutate(Breyer = if_else(str_detect(Majority, "Breyer"), 1,
if_else(str_detect(Dissent, "Breyer"), 0, 2))) %>%
mutate(Sotomayor = if_else(str_detect(Majority, "Sotomayor"), 1,
if_else(str_detect(Dissent, "Sotomayor"), 0, 2))) %>%
mutate(Kagan = if_else(str_detect(Majority, "Kagan"), 1,
if_else(str_detect(Dissent, "Kagan"), 0, 2))) %>%
mutate(Gorsuch = if_else(str_detect(Majority, "Gorsuch"), 1,
if_else(str_detect(Dissent, "Gorsuch"), 0, 2)))
library(tidyverse)
library(dplyr)
library(stringr)
library(ggplot2)
library(extrafont)
library(RColorBrewer)
green <- "#189D1D"
pink <- "#D824C1"
yellow <-"#D4D824"
orange <- "#D89F24"
purple <-"#A824D8"
blue <- "#244CD8"
setwd("/Users/catherineparnell/alito-research")
df <- read.csv("AlitoDataset.csv")
setwd("/Users/catherineparnell/alito-research")
df <- read.csv("AlitoDataset.csv")
df <- read.csv("AlitoDataset.csv")
# makes justice booleans, 0 being dissent, 1 being majority, 2 being other
df <- df %>%
mutate(Roberts = if_else(str_detect(Majority, "Roberts"), 1,
if_else(str_detect(Dissent, "Roberts"), 0, 2))) %>%
mutate(Stevens = if_else(str_detect(Majority, "Stevens"), 1,
if_else(str_detect(Dissent, "Stevens"), 0, 2))) %>%
mutate(Scalia = if_else(str_detect(Majority, "Scalia"), 1,
if_else(str_detect(Dissent, "Scalia"), 0, 2))) %>%
mutate(Kennedy = if_else(str_detect(Majority, "Kennedy"), 1,
if_else(str_detect(Dissent, "Kennedy"), 0, 2))) %>%
mutate(Souter = if_else(str_detect(Majority, "Souter"), 1,
if_else(str_detect(Dissent, "Souter"), 0, 2))) %>%
mutate(Thomas = if_else(str_detect(Majority, "Thomas"), 1,
if_else(str_detect(Dissent, "Thomas"), 0, 2))) %>%
mutate(Ginsburg = if_else(str_detect(Majority, "Ginsburg"), 1,
if_else(str_detect(Dissent, "Ginsburg"), 0, 2))) %>%
mutate(Breyer = if_else(str_detect(Majority, "Breyer"), 1,
if_else(str_detect(Dissent, "Breyer"), 0, 2))) %>%
mutate(Sotomayor = if_else(str_detect(Majority, "Sotomayor"), 1,
if_else(str_detect(Dissent, "Sotomayor"), 0, 2))) %>%
mutate(Kagan = if_else(str_detect(Majority, "Kagan"), 1,
if_else(str_detect(Dissent, "Kagan"), 0, 2))) %>%
mutate(Gorsuch = if_else(str_detect(Majority, "Gorsuch"), 1,
if_else(str_detect(Dissent, "Gorsuch"), 0, 2)))
df$Characterized.Answer
# creates answer flag and splits answers when 2
df <- df %>%
separate(Characterized.Answer, c("Answer1", "Answer2"), sep=",", fill="right") %>%
mutate(AnswerFlag1 = case_when(
str_detect(Answer1, "Yes")~1,
str_detect(Answer1, "No")~0,
TRUE~2
)) %>%
mutate(AnswerFlag2 = case_when(
str_detect(Answer2, "Yes")~1,
str_detect(Answer2, "No")~0,
TRUE~2
))
df <- df %>%
mutate(Pink = I.Count.Pink + MA1.Count.Pink + R.Count.Pink + C.Count.Pink) %>%
mutate(Green = I.Count.Green + MA1.Count.Green + R.Count.Green + C.Count.Green) %>%
mutate(Blue = I.Count.Blue + MA1.Count.Blue + R.Count.Blue + C.Count.Blue) %>%
mutate(Orange = I.Count.Orange + MA1.Count.Orange + R.Count.Orange + C.Count.Orange) %>%
mutate(Purple = I.Count.Purple + MA1.Count.Purple + R.Count.Purple + C.Count.Purple) %>%
mutate(Yellow = I.Count.Yellow + MA1.Count.Yellow + R.Count.Yellow + C.Count.Yellow)
df
colors_totals <- df %>%
summarize(Pinktot = sum(Pink, na.rm=TRUE), Greentot = sum(Green, na.rm=TRUE), Bluetot = sum(Blue, na.rm = TRUE), Orangetot = sum(Orange, na.rm = TRUE), Purpletot = sum(Purple, na.rm=TRUE), Yellowtot = sum(Yellow, na.rm=TRUE)) %>%
gather(key="Color", value="Count") %>%
mutate(Color = fct_relevel(Color, c("Greentot", "Pinktot", "Yellowtot", "Orangetot", "Purpletot", "Bluetot")))
colors_totals
df <- df %>%
mutate(PinkNorm = (I.Count.Pink + MA1.Count.Pink + R.Count.Pink + C.Count.Pink) / Opinion.Length) %>%
mutate(GreenNorm = (I.Count.Green + MA1.Count.Green + R.Count.Green + C.Count.Green) / Opinion.Length) %>%
mutate(BlueNorm = (I.Count.Blue + MA1.Count.Blue + R.Count.Blue + C.Count.Blue) / Opinion.Length) %>%
mutate(OrangeNorm = (I.Count.Orange + MA1.Count.Orange + R.Count.Orange + C.Count.Orange) / Opinion.Length) %>%
mutate(PurpleNorm = (I.Count.Purple + MA1.Count.Purple + R.Count.Purple + C.Count.Purple) / Opinion.Length) %>%
mutate(YellowNorm = (I.Count.Yellow + MA1.Count.Yellow + R.Count.Yellow + C.Count.Yellow) / Opinion.Length)
pink_norm_mean = mean(df$PinkNorm, na.rm = TRUE)
green_norm_mean = mean(df$GreenNorm, na.rm = TRUE)
blue_norm_mean = mean(df$BlueNorm, na.rm = TRUE)
orange_norm_mean = mean(df$OrangeNorm, na.rm = TRUE)
purple_norm_mean = mean(df$PurpleNorm, na.rm = TRUE)
yellow_norm_mean = mean(df$YellowNorm, na.rm = TRUE)
# comparing two highest categories: pragmatism and doctrinalism - not as statistically significant...
pinkVgreen = t.test(df$Pink, df$Green)
pinkNormVgreenNorm = t.test(df$PinkNorm, df$GreenNorm)
# comparing pragmatism and originalism: common conceptions between conservative/liberal judges - extremely statistically significant !!
blueVgreen = t.test(df$Blue, df$Green)
blueNormVgreenNorm = t.test(df$BlueNorm, df$GreenNorm)
# comparing two highest categories: pragmatism and doctrinalism where yes v. no - even less statistically significant...
pinkVgreenYes = t.test(df$Pink[df$Answer1 == 'Yes'], df$Green[df$Answer1 == 'Yes'])
pinkNormVgreenNormYes = t.test(df$PinkNorm[df$Answer1 == 'Yes'], df$GreenNorm[df$Answer1 == 'Yes'])
pinkVgreenNo = t.test(df$Pink[df$Answer1 == 'No'], df$Green[df$Answer1 == 'No'])
pinkNormVgreenNormNo = t.test(df$PinkNorm[df$Answer1 == 'No'], df$GreenNorm[df$Answer1 == 'No'])
# comparing pragmatism and originalism: where yes v. no - also extremely statistically significant !!
blueVgreenYes = t.test(df$Blue[df$Answer1 == 'Yes'], df$Green[df$Answer1 == 'Yes'])
blueNormVgreenNormYes = t.test(df$BlueNorm[df$Answer1 == 'Yes'], df$GreenNorm[df$Answer1 == 'Yes'])
blueVgreenNo = t.test(df$Blue[df$Answer1 == 'No'], df$Green[df$Answer1 == 'No'])
blueNormVgreenNormNo = t.test(df$BlueNorm[df$Answer1 == 'No'], df$GreenNorm[df$Answer1 == 'No'])
# comparing two highest categories: pragmatism and doctrinalism based on vote split (contentious)
pinkVgreenSplit = t.test(df$Pink[df$Vote.Split == 1], df$Green[df$Vote.Split == 1])
# this p value is significantly less *in comparison* so likely more difference
pinkNormVgreenNormSplit = t.test(df$PinkNorm[df$Vote.Split == 1], df$GreenNorm[df$Vote.Split == 1])
# p value for these surprisingly high, more likely to be more similar, insinuates more doctrinalism when speaking for majority
pinkVgreenMaj = t.test(df$Pink[df$Vote.Split == 0], df$Green[df$Vote.Split == 0])
pinkNormVgreenNormMaj= t.test(df$PinkNorm[df$Vote.Split == 0], df$GreenNorm[df$Vote.Split == 0])
# comparing pragmatism and originalism: based on vote split not much change at all, still v significant
blueVgreenSplit = t.test(df$Blue[df$Vote.Split == 1], df$Green[df$Vote.Split == 1])
blueNormVgreenNormSplit = t.test(df$BlueNorm[df$Vote.Split == 1], df$GreenNorm[df$Vote.Split == 1])
blueVgreenMaj = t.test(df$Blue[df$Vote.Split == 0], df$Green[df$Vote.Split == 0])
blueNormVgreenNormMaj = t.test(df$BlueNorm[df$Vote.Split == 0], df$GreenNorm[df$Vote.Split == 0])
# comparing pragmatism across yes/no and vote split variables
greenVgreenYes =  t.test(df$Green, df$Green[df$Answer1 == 'Yes']) # not significant
greenVgreenYesNorm =  t.test(df$GreenNorm, df$GreenNorm[df$Answer1 == 'Yes']) # not significant
greenVgreenNo = t.test(df$Green, df$Green[df$Answer1 == 'No']) # even less significant
greenVgreenNoNorm = t.test(df$GreenNorm, df$GreenNorm[df$Answer1 == 'No']) # even even less significant - basically the same
greenVgreenSplit = t.test(df$Green, df$Green[df$Vote.Split == 1]) # significant: green < green split
greenVgreenSplitNorm = t.test(df$GreenNorm, df$GreenNorm[df$Vote.Split == 1]) # not significant
greenVgreenMaj = t.test(df$Green, df$Green[df$Vote.Split == 0]) # statistically significant: green > green maj
greenVgreenMajNorm = t.test(df$GreenNorm, df$GreenNorm[df$Vote.Split == 0]) # not significant
# comparing originalism across yes/no and vote split variables
blueVblueYes =  t.test(df$Blue, df$Blue[df$Answer1 == 'Yes']) # not significant
blueVblueYesNorm =  t.test(df$BlueNorm, df$BlueNorm[df$Answer1 == 'Yes']) # even less so
blueVblueNo = t.test(df$Blue, df$Blue[df$Answer1 == 'No']) # not significant
blueVblueNoNorm = t.test(df$BlueNorm, df$BlueNorm[df$Answer1 == 'No']) # even less so
blueVblueSplit = t.test(df$Blue, df$Blue[df$Vote.Split == 1]) # not significant
blueVblueSplitNorm = t.test(df$BlueNorm, df$BlueNorm[df$Vote.Split == 1]) # not significant
blueVblueMaj = t.test(df$Blue, df$Blue[df$Vote.Split == 0]) # a little more so, but not significant
blueVblueMajNorm = t.test(df$BlueNorm, df$BlueNorm[df$Vote.Split == 0]) # very much less significant
View(blueVblueSplit)
View(blueVblueSplit)
View(pinkVgreen)
View(pinkVgreen)
View(blueVgreen)
pinkNormVyellowNorm = t.test(df$PinkNorm, df$YellowNorm)
pinkNormVyellowNorm
greenNormVyellowNorm = t.test(df$GreenNorm, df$YellowNorm)
greenNormVyellowNorm
blueNormVyellowNorm = t.test(df$BlueNorm, df$YellowNorm)
blueNormVyellowNorm
purpleNormVyellowNorm = t.test(df$PurpleNorm, df$YellowNorm)
purpleNormVyellowNorm
View(blueVgreenYes)
View(blueVgreenYes)
View(blueVgreenNo)
View(blueVgreenNo)
View(pinkVgreenYes)
View(pinkVgreenYes)
View(pinkVgreenNo)
View(pinkVgreenNo)
View(blueVgreenNo)
View(blueVgreenNo)
View(pinkVgreenSplit)
View(pinkVgreenSplit)
View(pinkNormVgreenNormSplit)
View(pinkNormVgreenNormSplit)
View(pinkNormVgreenNormMaj)
View(greenVgreenSplit)
View(greenVgreenSplit)
View(greenVgreenSplitNorm)
View(greenVgreenMaj)
View(greenVgreenMaj)
View(greenVgreenMajNorm)
View(greenVgreenMajNorm)
# main argument vs rebuttal: overall do any of the color change proportions shift
df <- df %>%
mutate(PinkMainNorm = (MA1.Count.Pink) / MA1.Length) %>%
mutate(GreenMainNorm = (MA1.Count.Green) / MA1.Length) %>%
mutate(BlueMainNorm = (MA1.Count.Blue) / MA1.Length) %>%
mutate(OrangeMainNorm = (MA1.Count.Orange) / MA1.Length) %>%
mutate(PurpleMainNorm = (MA1.Count.Purple) / MA1.Length) %>%
mutate(YellowMainNorm = (MA1.Count.Yellow) / MA1.Length)
df <- df %>%
mutate(PinkRebNorm = (R.Count.Pink) / R.Length) %>%
mutate(GreenRebNorm = (R.Count.Green) / R.Length) %>%
mutate(BlueRebNorm = (R.Count.Blue) / R.Length) %>%
mutate(OrangeRebNorm = (R.Count.Orange) / R.Length) %>%
mutate(PurpleRebNorm = (R.Count.Purple) / R.Length) %>%
mutate(YellowRebNorm = (R.Count.Yellow) / R.Length)
pinkMainVpinkReb = t.test(df$MA1.Count.Pink, df$R.Count.Pink)
pinkMainVpinkRebNorm = t.test(df$PinkMainNorm, df$PinkRebNorm)
greenMainVgreenReb = t.test(df$MA1.Count.Green, df$R.Count.Green)
greenMainVgreenRebNorm = t.test(df$GreenMainNorm, df$GreenRebNorm)
blueMainVblueReb = t.test(df$MA1.Count.Blue, df$R.Count.Blue)
blueMainVblueRebNorm = t.test(df$BlueMainNorm, df$BlueRebNorm)
yellowMainVyellowReb = t.test(df$MA1.Count.Yellow, df$R.Count.Yellow)
yellowMainVyellowRebNorm = t.test(df$YellowMainNorm, df$YellowRebNorm)
purpleMainVpurpleReb = t.test(df$MA1.Count.Purple, df$R.Count.Purple)
purpleMainVpurpleRebNorm = t.test(df$PurpleMainNorm, df$PurpleRebNorm)
orangeMainVorangeReb = t.test(df$MA1.Count.Orange, df$R.Count.Orange)
orangeMainVorangeRebNorm = t.test(df$OrangeMainNorm, df$OrangeRebNorm)
t.test(df$MA1.Count.Pink, df$R.Count.Pink)
t.test(df$MA1.Count.Green, df$R.Count.Green)
t.test(df$MA1.Count.Blue, df$R.Count.Blue)
t.test(df$MA1.Count.Yellow, df$R.Count.Yellow)
t.test(df$MA1.Count.Purple, df$R.Count.Purple)
t.test(df$MA1.Count.Orange, df$R.Count.Orange)
sum(is.na(df$MA1.Length))
sum(is.na(df$.Length))
sum(is.na(df$R.Length))
is.na(df$R.Length)
df %<% filter(is.na(R.Length))
library(dplyr)
df %>% filter(is.na(R.Length))
df %>% filter(is.na(R.Length)) %>% select(Case.Name)
df %>% filter(is.na(MA1.Length)) %>% select(Case.Name)
